import React, { useState } from "react";
import { View, Text, ActivityIndicator, ScrollView, Alert, Button } from "react-native";
import axios from "axios";

export default function DiaryLibraryScreen({ route }) {
  const { diaryEntries } = route.params || {};
  const [analysisResults, setAnalysisResults] = useState({});
  const [loading, setLoading] = useState(false);
  const [summary, setSummary] = useState(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const analyzeAllEntries = async () => {
    if (!diaryEntries || Object.keys(diaryEntries).length === 0) {
      Alert.alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡πÄ‡∏•‡∏¢");
      return;
    }

    setLoading(true);
    let results = {};
    let count = { pos: 0, neg: 0, neu: 0 };

    for (const [date, text] of Object.entries(diaryEntries)) {
      try {
        const res = await axios.post("http://10.1.105.202:5000/diary", { message: text });
        const sentiment = res.data.emotion; // üëà ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Flask + Gemini

        results[date] = { text, sentiment };

        // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
        if (sentiment.includes("‡∏î‡∏µ‡πÉ‡∏à") || sentiment.includes("‡∏ö‡∏ß‡∏Å")) count.pos++;
        else if (sentiment.includes("‡πÄ‡∏®‡∏£‡πâ‡∏≤") || sentiment.includes("‡∏Å‡∏±‡∏á‡∏ß‡∏•") || sentiment.includes("‡∏•‡∏ö")) count.neg++;
        else count.neu++;
      } catch (err) {
        console.error("Error analyzing:", err);
        results[date] = { text, sentiment: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ" };
      }
    }

    setAnalysisResults(results);
    setLoading(false);
    setSummary(count);
    Alert.alert("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ");
  };

  return (
    <View style={{ flex: 1, padding: 20 }}>
      <Button
        title="‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        onPress={analyzeAllEntries}
        color="dodgerblue"
      />

      {loading ? (
        <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
          <ActivityIndicator size="large" color="#0000ff" />
          <Text>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...</Text>
        </View>
      ) : (
        <ScrollView style={{ marginTop: 20 }}>
          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° */}
          {summary && (
            <View style={{ marginBottom: 20, padding: 15, backgroundColor: "#f0f8ff", borderRadius: 10 }}>
              <Text style={{ fontWeight: "bold", fontSize: 16 }}>üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</Text>
              <Text>üòä ‡∏ö‡∏ß‡∏Å: {summary.pos} ‡∏ß‡∏±‡∏ô</Text>
              <Text>üòê ‡πÄ‡∏â‡∏¢‡πÜ: {summary.neu} ‡∏ß‡∏±‡∏ô</Text>
              <Text>üò¢ ‡∏•‡∏ö: {summary.neg} ‡∏ß‡∏±‡∏ô</Text>
            </View>
          )}

          {Object.entries(analysisResults).map(([date, { text, sentiment }]) => (
            <View
              key={date}
              style={{
                padding: 10,
                borderBottomWidth: 1,
                borderBottomColor: "#ccc",
              }}
            >
              <Text style={{ fontWeight: "bold" }}>üìÖ {date}</Text>
              <Text>‚úè {text}</Text>
              <Text>üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {sentiment}</Text>
            </View>
          ))}
        </ScrollView>
      )}
    </View>
  );
}
