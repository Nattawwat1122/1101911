import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TextInput, Alert, ScrollView, TouchableOpacity, Modal, Platform } from 'react-native';
import { Calendar } from 'react-native-calendars';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

import axios from 'axios';
import { getFirestore, doc, setDoc, getDocs, collection } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const db = getFirestore();

/** -----------------------
 *  API Client (Flask + Ollama)
 *  ‡∏õ‡∏£‡∏±‡∏ö URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå/‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
 *  - Android Emulator: http://10.0.2.2:5000
 *  - iOS Simulator:    http://localhost:5000
 *  - ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏£‡∏¥‡∏á/‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô: ‡πÉ‡∏ä‡πâ IP LAN ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Flask
 ------------------------ */
const DEV_SERVER_URL = Platform.OS === 'ios' ? 'http://localhost:5000' : ' http://192.168.1.137:5000';
// ‚ö†Ô∏è ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà <YOUR-LAN-IP> ‡πÄ‡∏õ‡πá‡∏ô IP ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏£‡∏¥‡∏á/‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô
const PROD_SERVER_URL = 'http://<YOUR-LAN-IP>:5000';
const SERVER_URL = __DEV__ ? DEV_SERVER_URL : PROD_SERVER_URL;

const api = axios.create({
  baseURL: SERVER_URL,
  timeout: 20000,
  headers: { 'Content-Type': 'application/json' },
});

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (string) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (number)
function emotionToScore(raw) {
  if (!raw) return 2; // ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå = ‡∏õ‡∏Å‡∏ï‡∏¥
  const s = String(raw).toLowerCase().trim();

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏∞‡∏Å‡∏î/‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
  if (s.includes('‡πÅ‡∏¢j')) return 1;

  // ‡πÅ‡∏°‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const map = {
    '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å': 0,
    '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏¢‡πà': 1,
    '‡∏õ‡∏Å‡∏ï‡∏¥': 2,
    '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ': 3,
    '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ‡∏°‡∏≤‡∏Å': 4,
  };

  // ‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö ‚Äú‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‚Äù ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ‡∏°‡∏≤‡∏Å üòä"
  for (const key of Object.keys(map)) {
    if (s.startsWith(key)) return map[key];
  }

  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ backend ‡∏™‡πà‡∏á‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  if (s.startsWith('very bad')) return 0;
  if (s.startsWith('bad')) return 1;
  if (s.startsWith('normal') || s.startsWith('neutral')) return 2;
  if (s.startsWith('good')) return 3;
  if (s.startsWith('very good') || s.startsWith('great')) return 4;

  return 2; // fallback = ‡∏õ‡∏Å‡∏ï‡∏¥
}


export default function DiaryScreen() {
  const [selectedDate, setSelectedDate] = useState(getTodayDate());
  const [diaryEntries, setDiaryEntries] = useState({});
  const [modalVisible, setModalVisible] = useState(false);

  const [title, setTitle] = useState('');
  const [categories, setCategories] = useState([]);
  const [content, setContent] = useState('');

  const [categoryOptions, setCategoryOptions] = useState([]); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Firestore

  const navigation = useNavigation();
  const user = getAuth().currentUser;

  function getTodayDate() {
    const today = new Date();
    return today.toISOString().split('T')[0];
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  useEffect(() => {
    if (!user) return;
    const loadEntries = async () => {
      try {
        const snap = await getDocs(collection(db, 'diaryEntries', user.uid, 'entries'));
        let data = {};
        snap.forEach((docSnap) => {
          data[docSnap.id] = docSnap.data();
        });
        setDiaryEntries(data);
      } catch (error) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ', error);
      }
    };
    loadEntries();
  }, [user]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å Firestore (‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô "categories")
  useEffect(() => {
    const loadCategories = async () => {
      try {
        const snap = await getDocs(collection(db, 'categories'));
        let data = [];
        snap.forEach((docSnap) => {
          data.push(docSnap.id); // ‡πÉ‡∏ä‡πâ document id ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
        });
        setCategoryOptions(data);
      } catch (error) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ', error);
      }
    };
    loadCategories();
  }, []);

  const onDayPress = (day) => setSelectedDate(day.dateString);

  const toggleCategory = (cat) => {
    setCategories((prev) => (prev.includes(cat) ? prev.filter((c) => c !== cat) : [...prev, cat]));
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà + ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /diary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Ollama) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü‡∏•‡∏á Firestore
  const handleSave = async () => {
    if (!user) {
      Alert.alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà');
      return;
    }
    if (!title.trim() || !content.trim()) {
      Alert.alert('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤');
      return;
    }

    try {
      // 1) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
      // 1) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
      let emotion = '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ';
      let risk = '‡∏õ‡∏Å‡∏ï‡∏¥';
      try {
        const res = await api.post('/diary', { message: content });
        emotion = res?.data?.emotion || emotion;
        risk = res?.data?.risk || risk;
      } catch (e) {
        console.warn('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /diary ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', e?.message || e);
      }

      // ‚úÖ 1.5) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
      const emotionScore = emotionToScore(emotion);

      // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
      const payload = {
        title,
        categories,
        content,
        emotion,       // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å AI
        emotionScore,  // ‚úÖ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ
        risk,
        createdAt: new Date().toISOString(),
        analyzedAt: new Date().toISOString(),
      };


      // 3) ‡πÄ‡∏ã‡∏ü‡∏•‡∏á Firestore ‡∏ó‡∏µ‡πà path: diaryEntries/{uid}/entries/{YYYY-MM-DD}
      await setDoc(doc(db, 'diaryEntries', user.uid, 'entries', selectedDate), payload);

      // 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
      setDiaryEntries((prev) => ({
        ...prev,
        [selectedDate]: payload,
      }));

      // 5) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏° ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•
      setTitle('');
      setContent('');
      setCategories([]);
      setModalVisible(false);

      Alert.alert('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡πÅ‡∏•‡πâ‡∏ß`);
    } catch (error) {
      console.error('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ', error);
      Alert.alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message);
    }
  };

  return (
    <View style={styles.container}>
      <Calendar
        onDayPress={onDayPress}
        markedDates={{
          ...Object.keys(diaryEntries).reduce(
            (acc, date) => {
              acc[date] = {
                marked: true,
                dotColor: 'red',
                ...(date === selectedDate && { selected: true, selectedColor: 'dodgerblue' }),
              };
              return acc;
            },
            {
              [selectedDate]: { selected: true, selectedColor: 'dodgerblue' },
            }
          ),
        }}
        style={styles.calendar}
      />

      <Text style={styles.label}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selectedDate}</Text>



      <TouchableOpacity style={styles.writeButton} onPress={() => setModalVisible(true)}>
        <Icon name="create-outline" size={22} color="#fff" style={{ marginRight: 8 }} />
        <Text style={styles.buttonText}>‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.libraryButton}
        onPress={() => navigation.navigate('DiaryLibrary', { diaryEntries })}
      >
        <Icon name="book" size={22} color="#fff" style={{ marginRight: 8 }} />
        <Text style={styles.buttonText}>‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà</Text>
      </TouchableOpacity>

      {/* Modal ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      <Modal visible={modalVisible} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>‚úèÔ∏è ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>

            <TextInput
              placeholder="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"
              value={title}
              onChangeText={setTitle}
              style={styles.input}
            />

            <Text style={styles.modalSubtitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î)</Text>
            <View style={styles.categoryContainer}>
              {categoryOptions.map((cat) => (
                <TouchableOpacity
                  key={cat}
                  style={[styles.categoryItem, categories.includes(cat) && styles.categoryItemSelected]}
                  onPress={() => toggleCategory(cat)}
                >
                  <Text style={[styles.categoryText, categories.includes(cat) && styles.categoryTextSelected]}>
                    {cat}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            <ScrollView style={{ maxHeight: 150 }}>
              <TextInput
                multiline
                placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                value={content}
                onChangeText={setContent}
                style={[styles.input, { minHeight: 100, textAlignVertical: 'top' }]}
              />
            </ScrollView>

            <View style={styles.modalButtons}>
              <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
                <Text style={styles.buttonText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.cancelButton} onPress={() => setModalVisible(false)}>
                <Text style={styles.buttonText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

/* ----------------------- Styles ----------------------- */
const styles = StyleSheet.create({
  container: { flex: 1, padding: 10 },
  calendar: { marginBottom: 10 },
  label: { fontSize: 16, fontWeight: '600', marginVertical: 8, textAlign: 'center' },

  writeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#00B4D8',
    paddingVertical: 12,
    borderRadius: 12,
    justifyContent: 'center',
    marginBottom: 10,
    elevation: 3,
  },
  libraryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#C77DFF',
    paddingVertical: 12,
    borderRadius: 12,
    justifyContent: 'center',
    elevation: 3,
  },

  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },

  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
    padding: 20,
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    elevation: 5,
  },
  modalTitle: { fontSize: 18, fontWeight: '700', marginBottom: 10, textAlign: 'center' },
  modalSubtitle: { fontSize: 16, fontWeight: '600', marginTop: 10, marginBottom: 5 },
  categoryContainer: { flexDirection: 'row', flexWrap: 'wrap', marginVertical: 8 },
  categoryItem: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
    margin: 4,
    backgroundColor: '#f9f9f9',
  },
  categoryItemSelected: {
    backgroundColor: '#00B4D8',
    borderColor: '#00B4D8',
  },
  categoryText: { fontSize: 14, color: '#333' },
  categoryTextSelected: { color: '#fff', fontWeight: '600' },

  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 10,
    marginVertical: 8,
    fontSize: 16,
  },
  modalButtons: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 10 },
  saveButton: {
    flex: 1,
    backgroundColor: '#FF6B81',
    padding: 12,
    borderRadius: 8,
    marginRight: 5,
    alignItems: 'center',
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#6c757d',
    padding: 12,
    borderRadius: 8,
    marginLeft: 5,
    alignItems: 'center',
  },
});
